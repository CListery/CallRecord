apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion buildVersionInt

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode VERSION_CODE
        versionName VERSION_NAME

        buildConfigField('String', 'CALL_RECORD_DB', '"call_record.realm"')
        buildConfigField('long', 'CALL_RECORD_RETRY_TIME', '5000')
        buildConfigField('long', 'MAX_CALL_TIME_OFFSET', '60000')
        buildConfigField('long', 'MIN_CALL_TIME_OFFSET', '100')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('boolean', 'ENABLE_DEBUG', 'false')
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('boolean', 'ENABLE_DEBUG', 'true')
        }
        dev {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('boolean', 'ENABLE_DEBUG', 'true')
        }
    }

}

def getSDK19LayoutLibPath() {
    [
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-19/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-20/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-21/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-22/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-23/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-24/data/layoutlib.jar",
"${android.getSdkDirectory().getAbsolutePath()}/platforms/android-25/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-26/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-27/data/layoutlib.jar",
//            "${android.getSdkDirectory().getAbsolutePath()}/platforms/android-28/data/layoutlib.jar"
    ]
//    return "${android.getSdkDirectory().getAbsolutePath()}" +
//            "/platforms/" + /*android.compileSdkVersion*/"android-25" + "/data/layoutlib.jar"
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //rxJava2
//    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    //Kotlin-Realm-Extensions
    implementation 'com.github.vicpinm:krealmextensions:2.5.0'
    //AndLinker
    implementation 'com.codezjx.library:andlinker:0.7.1'

    getSDK19LayoutLibPath().forEach{ compileOnly files(it) }
    implementation 'com.clistery.app:appinject:1.3.3'
}

task androidJavadocs(type: Javadoc) {
    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    options.linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    excludes = ['**/*.kt', '**/BuildConfig.java', '**/R.java']
    failOnError = false
}

task dokkaJavadoc(overwrite: true, type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = androidJavadocs.destinationDir
    includeNonPublic = true
    skipEmptyPackages = true
    noStdlibLink = true
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier "sources"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

apply from: 'publish-artifactory.gradle'
